{"version":3,"file":"static/js/247.c92d3495.chunk.js","mappings":"uMACA,EAA8B,iCAA9B,EAAuE,2B,mBCqDvE,EAlDoB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SACrB,GAAwBC,EAAAA,EAAAA,MAAjBC,GAAP,eAqBA,OACE,kBAAMC,UAAWC,EAAiBC,SArBjB,SAAAC,GACjB,IAAMC,EAAOD,EAAME,cACnBF,EAAMG,iBACN,IAAMC,EAAc,CAClBC,KAAMJ,EAAKK,SAASD,KAAKE,MACzBC,OAAQP,EAAKK,SAASE,OAAOD,OAGzBE,EAAiBf,EAASgB,MAC9B,SAAAC,GAAI,OAAIA,EAAKN,OAASD,EAAYC,IAA9B,IAGFI,EACFG,MAAM,GAAD,OAAIH,EAAeJ,KAAnB,4BAELT,EAAcQ,GAEhBH,EAAKY,OACN,EAGC,WACE,kCACA,4BACE,kBACEC,KAAK,OACLT,KAAK,OACLU,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,OAGZ,oCACA,4BACE,kBACEH,KAAK,MACLT,KAAK,SACLU,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRpB,UAAWC,OAGf,8CAGL,ECnDD,EAAqB,wBAArB,EAAiD,uBAAjD,EAAiF,4BCejF,EAboB,SAAC,GAAoC,IAAlCoB,EAAiC,EAAjCA,GAAIb,EAA6B,EAA7BA,KAAMG,EAAuB,EAAvBA,OAAQW,EAAe,EAAfA,SAEvC,OACE,gBAAItB,UAAWC,EAAf,WACE,cAAGD,UAAWC,EAAd,SAAsBO,KACtB,uBAAIG,KACJ,mBAAQX,UAAWC,EAAYsB,QAAS,kBAAMD,EAASD,EAAf,EAAxC,0DAKL,ECbD,EAAqB,wB,UC+BrB,EA3BoB,SAAC,GAA4B,IAA1BxB,EAAyB,EAAzBA,SAAUyB,EAAe,EAAfA,SAEzBE,GADSC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,QAAQC,MAAlB,IACAC,cAC1BC,EAAejC,EAAS+B,QAAO,SAAAD,GAAO,OAC1CA,EAAQnB,KAAKqB,cAAcE,SAASP,EADM,IAI5C,OACE,eAAIxB,UAAWC,EAAf,SACG6B,EAAaE,KAAI,gBAAGX,EAAH,EAAGA,GAAIb,EAAP,EAAOA,KAAMG,EAAb,EAAaA,OAAb,OAChB,SAAC,EAAD,CAEEU,GAAIA,EACJb,KAAMA,EACNG,OAAQA,EACRW,SAAUA,GAJLD,EAFS,KAWvB,ECxBD,EAAqB,mB,UCoBrB,EAhBe,WACb,IAAMY,GAAWC,EAAAA,EAAAA,MACjB,OACE,iCACE,eAAIlC,UAAWC,EAAf,oCACA,4BACE,kBACEgB,KAAK,OACLkB,SAAU,SAAAhC,GAAK,OACb8B,GAASG,EAAAA,EAAAA,IAAejC,EAAME,cAAcK,OAD/B,QAOxB,ECYD,EAxBiB,WACf,OAA6B2B,EAAAA,EAAAA,MAArBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,WACd,GAAwBC,EAAAA,EAAAA,MAAjBC,GAAP,eAEA,OACE,iBACEC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,SAAU,GACVC,MAAO,WAPX,WAUE,SAAC,EAAD,CAAanD,SAAUyC,KACvB,sCACA,SAAC,EAAD,IACCC,IAAc,sCACdD,IAAQ,SAAC,EAAD,CAAazC,SAAUyC,EAAMhB,SAAUmB,MAGrD,ECpBD,EARsB,WACpB,OACE,0BACE,SAAC,EAAD,KAGL,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Contacts/ContactForm/ContactForm.module.css?4d46","components/Contacts/ContactForm/ContactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/Contacts/ContactItem/ContactItem.module.css?65d1","components/Contacts/ContactItem/ContactItem.js","webpack://goit-react-hw-08-phonebook/./src/components/Contacts/ContactList/ContactList.module.css?357e","components/Contacts/ContactList/ContactList.js","webpack://goit-react-hw-08-phonebook/./src/components/Contacts/Filter/Filter.module.css?8ad8","components/Contacts/Filter/Filter.js","components/Contacts/Contacts.jsx","pages/ContactsPages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__NTi+V\",\"input\":\"ContactForm_input__UVgk1\"};","import css from './ContactForm.module.css';\nimport PropTypes from 'prop-types';\nimport { useCreateContactMutation } from '../../../redux/contact/contactSlice';\n\nconst ContactForm = ({ contacts }) => {\n  const [createContact] = useCreateContactMutation();\n  const formSubmit = event => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    const dataContact = {\n      name: form.elements.name.value,\n      number: form.elements.number.value,\n    };\n\n    const repeatContacts = contacts.find(\n      elem => elem.name === dataContact.name\n    );\n\n    if (repeatContacts) {\n      alert(`${repeatContacts.name} is already in contacts`);\n    } else {\n      createContact(dataContact);\n    }\n    form.reset();\n  };\n\n  return (\n    <form className={css.contactForm} onSubmit={formSubmit}>\n      <h2>Name</h2>\n      <label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <h2>Number</h2>\n      <label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          className={css.input}\n        />\n      </label>\n      <button>Add contact</button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"li\":\"ContactItem_li__Nu5s8\",\"p\":\"ContactItem_p__HySq+\",\"button\":\"ContactItem_button__PIPaE\"};","import css from './ContactItem.module.css';\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number, onDelete }) => {\n\n  return (\n    <li className={css.li}>\n      <p className={css.p}>{name}</p>\n      <p>{number}</p>\n      <button className={css.button} onClick={() => onDelete(id)}>\n        Удалить\n      </button>\n    </li>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"ul\":\"ContactList_ul__P0+L6\"};","import ContactItem from '../ContactItem/ContactItem';\nimport css from './ContactList.module.css';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nconst ContactList = ({ contacts, onDelete }) => {\n  const filter = useSelector(state => state.contact.filter);\n  const normalizedFilter = filter.toLowerCase();\n  const resultFilter = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  return (\n    <ul className={css.ul}>\n      {resultFilter.map(({ id, name, number }) => (\n        <ContactItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          onDelete={onDelete}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)).isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"h2\":\"Filter_h2__ymgpe\"};","import css from './Filter.module.css';\n// import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contact/contact';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <h2 className={css.h2}>Find contacts by name</h2>\n      <label>\n        <input\n          type=\"text\"\n          onChange={event =>\n            dispatch(filterContacts(event.currentTarget.value))\n          }\n        />\n      </label>\n    </>\n  );\n};\nexport default Filter;\n","import ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport {\n  useDeleteContactMutation,\n  useFetchContactsQuery,\n} from '../../redux/contact/contactSlice';\n\nconst Contacts = () => {\n  const { data, isFetching } = useFetchContactsQuery();\n  const [deleteContact] = useDeleteContactMutation();\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: 16,\n        color: '#010101',\n      }}\n    >\n      <ContactForm contacts={data} />\n      <h2>Contacts</h2>\n      <Filter />\n      {isFetching && <p>...loading</p>}\n      {data && <ContactList contacts={data} onDelete={deleteContact} />}\n    </div>\n  );\n};\n\nexport default Contacts;\n","import Contacts from 'components/Contacts/Contacts';\n\nconst ContactsPages = () => {\n  return (\n    <div>\n      <Contacts />\n    </div>\n  );\n};\n\nexport default ContactsPages;\n"],"names":["contacts","useCreateContactMutation","createContact","className","css","onSubmit","event","form","currentTarget","preventDefault","dataContact","name","elements","value","number","repeatContacts","find","elem","alert","reset","type","pattern","title","required","id","onDelete","onClick","normalizedFilter","useSelector","state","contact","filter","toLowerCase","resultFilter","includes","map","dispatch","useDispatch","onChange","filterContacts","useFetchContactsQuery","data","isFetching","useDeleteContactMutation","deleteContact","style","display","flexDirection","justifyContent","alignItems","fontSize","color"],"sourceRoot":""}